# bot.py
import logging
import os
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, ContextTypes # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ MessageHandler, filters

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv('BOT_TOKEN')
WEBAPP_URL = os.getenv('WEBAPP_URL')

if not BOT_TOKEN:
    logger.error("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ BOT_TOKEN! –ü–µ—Ä–µ–≤—ñ—Ä –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.")
    exit()
# –ù–µ –≤–∏—Ö–æ–¥–∏–º–æ, —è–∫—â–æ –Ω–µ–º–∞—î WEBAPP_URL, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
if not WEBAPP_URL:
    logger.warning("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ WEBAPP_URL! –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è WebApp –Ω–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º–µ.")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞–¥—Å–∏–ª–∞—î –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è —Ç–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è Web App."""
    if not WEBAPP_URL:
         await update.message.reply_text("–ù–∞ –∂–∞–ª—å, URL –≤–µ–±-–¥–æ–¥–∞—Ç–∫—É –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ.")
         return

    # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ Web App
    web_app_info = WebAppInfo(url=WEBAPP_URL)
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫—É, —è–∫–∞ –≤—ñ–¥–∫—Ä–∏–≤–∞—î Web App
    button = InlineKeyboardButton(text="üöÄ –í—ñ–¥–∫—Ä–∏—Ç–∏ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫", web_app=web_app_info)
    keyboard = InlineKeyboardMarkup([[button]])

    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! üëã –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –≤—ñ–¥–∫—Ä–∏—Ç–∏ —Å–≤—ñ–π –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–≤–¥–∞–Ω—å:",
        reply_markup=keyboard
    )

async def planner(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /planner, —Å–∏–Ω–æ–Ω—ñ–º /start."""
    await start(update, context)

# –ü—Ä–∏–±–∏—Ä–∞—î–º–æ web_app_data_handler, –±–æ –≤—ñ–Ω –±—ñ–ª—å—à–µ –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω

def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞—î –±–æ—Ç–∞."""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

    # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–æ–¥–∞—Ç–æ–∫ —Ç–∞ –ø–µ—Ä–µ–¥–∞—î–º–æ —Ç–æ–∫–µ–Ω
    application = Application.builder().token(BOT_TOKEN).build()

    # –†–µ—î—Å—Ç—Ä—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("planner", planner))
    # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é MessageHandler –¥–ª—è WEB_APP_DATA

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º—ñ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è (polling)
    logger.info("–ë–æ—Ç –ø–æ—á–∏–Ω–∞—î –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è...")
    # –ú–æ–∂–Ω–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ Update.ALL_TYPES –∞–±–æ –ø—Ä–∏–±—Ä–∞—Ç–∏ allowed_updates, —è–∫—â–æ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω—ñ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ —Ç–∏–ø–∏
    application.run_polling() # allowed_updates=Update.ALL_TYPES

if __name__ == "__main__":
    main()
