# bot.py
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import ContextTypes
import os # –ü–æ—Ç—Ä—ñ–±–µ–Ω –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è WEBAPP_URL –≤ start

# –ë–∞–∑–æ–≤–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è —Ñ—É–Ω–∫—Ü—ñ–π –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
logger = logging.getLogger(__name__)

# –ó–º—ñ–Ω–Ω—É WEBAPP_URL —Ç–µ–ø–µ—Ä –±—É–¥–µ–º–æ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–æ–¥–∞—Ç–∫—É –∞–±–æ os.getenv
# –ö—Ä–∞—â–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ —ó—ó —á–µ—Ä–µ–∑ context –∞–±–æ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –Ω–∞–ø—Ä—è–º—É —Ç—É—Ç

# bot.py

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞–¥—Å–∏–ª–∞—î –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è —Ç–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è Web App."""
    logger.info(f"===== –ö–æ–º–∞–Ω–¥–∞ /start –∞–±–æ /planner –æ—Ç—Ä–∏–º–∞–Ω–∞ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {update.effective_user.id} =====") # –ë—ñ–ª—å—à –ø–æ–º—ñ—Ç–Ω–∏–π –ª–æ–≥
    WEBAPP_URL = context.bot_data.get('webapp_url')
    logger.info(f"–°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ WEBAPP_URL –∑ context.bot_data. –†–µ–∑—É–ª—å—Ç–∞—Ç: {WEBAPP_URL}") # –õ–æ–≥—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É

    if not WEBAPP_URL:
         WEBAPP_URL = os.getenv('WEBAPP_URL')
         logger.info(f"WEBAPP_URL –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ context. –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ os.getenv. –†–µ–∑—É–ª—å—Ç–∞—Ç: {WEBAPP_URL}") # –õ–æ–≥—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑ env

    if not WEBAPP_URL:
         logger.error("!!! WEBAPP_URL –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω—ñ –∑ context, –Ω—ñ –∑ env. –ö–æ–º–∞–Ω–¥–∞ start –Ω–µ –º–æ–∂–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–Ω–æ–ø–∫—É.") # –ü–æ–º—ñ—Ç–Ω–∏–π –ª–æ–≥ –ø–æ–º–∏–ª–∫–∏
         await update.message.reply_text("–ù–∞ –∂–∞–ª—å, URL –≤–µ–±-–¥–æ–¥–∞—Ç–∫—É –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ.")
         return

    logger.info(f"WEBAPP_URL '{WEBAPP_URL}' –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–Ω–æ–ø–∫–∏.")
    web_app_info = WebAppInfo(url=WEBAPP_URL)
    button = InlineKeyboardButton(
        text="üöÄ –í—ñ–¥–∫—Ä–∏—Ç–∏ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫",
        web_app=web_app_info
    )
    keyboard = InlineKeyboardMarkup([[button]])

    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! üëã –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –≤—ñ–¥–∫—Ä–∏—Ç–∏ —Å–≤—ñ–π –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–≤–¥–∞–Ω—å:",
        reply_markup=keyboard
    )
    logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–æ—é WebApp –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {update.effective_user.id}")

async def planner(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–∏–Ω–æ–Ω—ñ–º /start."""
    await start(update, context)


async def web_app_data_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–ª—è—î –¥–∞–Ω—ñ, –æ—Ç—Ä–∏–º–∞–Ω—ñ –≤—ñ–¥ Web App."""
    user = update.effective_user
    received_text = update.message.web_app_data.data
    logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω—ñ Web App –≤—ñ–¥ {user.username} (ID: {user.id}): {len(received_text)} —Å–∏–º–≤–æ–ª—ñ–≤")

    if received_text:
        await context.bot.send_message(
            chat_id=user.id,
            text="üìã –í–∞—à —Å–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å –¥–ª—è –ø–æ—à–∏—Ä–µ–Ω–Ω—è:\n(–ú–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Å–ª–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è forward)"
        )
        await context.bot.send_message(chat_id=user.id, text=received_text)
    else:
         await context.bot.send_message(chat_id=user.id, text="–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ—Ä–æ–∂–Ω—ñ –¥–∞–Ω—ñ –≤—ñ–¥ Web App.")
