import os
from flask import Flask, render_template, request, redirect, url_for, session, flash
from dotenv import load_dotenv
from functools import wraps
from models import db, User, Task
from werkzeug.exceptions import NotFound
from datetime import datetime

load_dotenv()
app = Flask(__name__)

# --- –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è ---
app.config['SECRET_KEY'] = os.getenv('FLASK_SECRET_KEY')
db_user = os.getenv('DATABASE_USER')
db_password = os.getenv('DATABASE_PASSWORD')
db_host = os.getenv('DATABASE_HOST')
db_name = os.getenv('DATABASE_NAME')
app.config['SQLALCHEMY_DATABASE_URI'] = f'mysql+mysqlconnector://{db_user}:{db_password}@{db_host}/{db_name}'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

@app.context_processor
def inject_current_year():
    """–†–æ–±–∏—Ç—å –ø–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏–º –¥–ª—è –≤—Å—ñ—Ö —à–∞–±–ª–æ–Ω—ñ–≤."""
    return {'current_year': datetime.utcnow().year}

# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–æ–∑—à–∏—Ä–µ–Ω—å ---
db.init_app(app)

# --- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å ---
with app.app_context():
    try:
        print("–°–ø—Ä–æ–±–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏/–æ–Ω–æ–≤–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
        db.create_all()
        print("–¢–∞–±–ª–∏—Ü—ñ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ/–æ–Ω–æ–≤–ª–µ–Ω–æ (–∞–±–æ –≤–∂–µ —ñ—Å–Ω—É–≤–∞–ª–∏).")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ/–æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Ç–∞–±–ª–∏—Ü—å: {e}")

# --- –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤—Ö–æ–¥—É ---
def login_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'user_id' not in session:
            flash('–ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤—ñ–π–¥—ñ—Ç—å, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ —Ü—ñ—î—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏.', 'warning')
            return redirect(url_for('login'))
        return f(*args, **kwargs)
    return decorated_function

# --- –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–∞ –ï–º–æ–¥–∑—ñ ---
CATEGORIES = {
    'spring': '–í–µ—Å–Ω–∞ üå±',
    'summer': '–õ—ñ—Ç–æ ‚òÄÔ∏è',
    'autumn': '–û—Å—ñ–Ω—å üçÇ',
    'winter': '–ó–∏–º–∞ ‚ùÑÔ∏è',
    'general': '–ó–∞–≥–∞–ª—å–Ω—ñ üìå'
}

# --- –ú–∞—Ä—à—Ä—É—Ç–∏ ---
@app.route('/')
def index():
    """–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞: –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î –Ω–∞ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫, —è–∫—â–æ —É–≤—ñ–π—à–æ–≤, —ñ–Ω–∞–∫—à–µ –Ω–∞ –ª–æ–≥—ñ–Ω."""
    if 'user_id' in session:
        return redirect(url_for('planner'))
    return redirect(url_for('login'))

@app.route('/register', methods=['GET', 'POST'])
def register():
    """–°—Ç–æ—Ä—ñ–Ω–∫–∞ —Ç–∞ –æ–±—Ä–æ–±–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó."""
    if 'user_id' in session:
        return redirect(url_for('planner'))

    if request.method == 'POST':
        username = request.form.get('username')
        password = request.form.get('password')
        password_confirm = request.form.get('password_confirm')

        if not username or not password or not password_confirm:
            flash('–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å —É—Å—ñ –ø–æ–ª—è.', 'error')
            return render_template('register.html')

        if password != password_confirm:
            flash('–ü–∞—Ä–æ–ª—ñ –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å.', 'error')
            return render_template('register.html')

        existing_user = User.query.filter_by(username=username).first()
        if existing_user:
            flash('–¶–µ —ñ–º\'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–∂–µ –∑–∞–π–Ω—è—Ç–µ.', 'error')
            return render_template('register.html')

        new_user = User(username=username)
        new_user.set_password(password)
        try:
            db.session.add(new_user)
            db.session.commit()
            flash('–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞! –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ —É–≤—ñ–π—Ç–∏.', 'success')
            return redirect(url_for('login'))
        except Exception as e:
            db.session.rollback()
            flash(f'–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {e}', 'error')
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {e}")
            return render_template('register.html')

    return render_template('register.html')


@app.route('/login', methods=['GET', 'POST'])
def login():
    """–°—Ç–æ—Ä—ñ–Ω–∫–∞ —Ç–∞ –æ–±—Ä–æ–±–∫–∞ –≤—Ö–æ–¥—É."""
    if 'user_id' in session:
        return redirect(url_for('planner'))

    if request.method == 'POST':
        username = request.form.get('username')
        password = request.form.get('password')

        if not username or not password:
            flash('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —ñ–º\'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –ø–∞—Ä–æ–ª—å.', 'error')
            return render_template('login.html')

        user = User.query.filter_by(username=username).first()

        if user and user.check_password(password):
            session['user_id'] = user.id
            session['username'] = user.username
            flash(f'–ü—Ä–∏–≤—ñ—Ç, {user.username}! –í—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π!', 'success')
            return redirect(url_for('planner'))
        else:
            flash('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–µ —ñ–º\'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –ø–∞—Ä–æ–ª—å.', 'error')
            return render_template('login.html')

    return render_template('login.html')

@app.route('/logout')
@login_required
def logout():
    """–í–∏—Ö—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    username = session.get('username', '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á')
    session.pop('user_id', None)
    session.pop('username', None)
    flash(f'–î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è, {username}! –í–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∏–π—à–ª–∏.', 'info')
    return redirect(url_for('login'))

# --- –ú–∞—Ä—à—Ä—É—Ç–∏ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ ---
@app.route('/planner')
@login_required
def planner():
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Å—Ç–æ—Ä—ñ–Ω–∫—É –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ –∑ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    user_id = session['user_id']
    tasks = Task.query.filter_by(user_id=user_id).order_by(Task.category, Task.timestamp.desc()).all()

    tasks_by_category = {category_key: [] for category_key in CATEGORIES.keys()}
    for task in tasks:
        if task.category in tasks_by_category:
            tasks_by_category[task.category].append(task)
        else:
            tasks_by_category['general'].append(task)

    return render_template('planner.html', tasks_by_category=tasks_by_category, categories=CATEGORIES)

@app.route('/add_task', methods=['POST'])
@login_required
def add_task():
    """–î–æ–¥–∞—î –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è."""
    content = request.form.get('content')
    category = request.form.get('category')

    if not content:
        flash('–¢–µ–∫—Å—Ç –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º!', 'error')
        return redirect(url_for('planner'))

    if category not in CATEGORIES:
        flash('–ù–µ–≤—ñ—Ä–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è!', 'error')
        category = 'general'

    new_task = Task(content=content, category=category, user_id=session['user_id'])
    try:
        db.session.add(new_task)
        db.session.commit()
        flash('–ó–∞–≤–¥–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!', 'success')
    except Exception as e:
        db.session.rollback()
        flash(f'–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è: {e}', 'error')
        print(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è: {e}")

    return redirect(url_for('planner'))


@app.route('/toggle_task/<int:task_id>', methods=['POST'])
@login_required
def toggle_task(task_id):
    """–í—ñ–¥–º—ñ—á–∞—î –∑–∞–≤–¥–∞–Ω–Ω—è —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ/–Ω–µ–≤–∏–∫–æ–Ω–∞–Ω–µ."""
    task = Task.query.get_or_404(task_id)

    # –î—É–∂–µ –≤–∞–∂–ª–∏–≤–æ: –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞–ª–µ–∂–∏—Ç—å –ø–æ—Ç–æ—á–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ
    if task.user_id != session['user_id']:
        flash('–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è.', 'danger')
        return redirect(url_for('planner'))

    task.is_completed = not task.is_completed # –ó–º—ñ–Ω—é—î–º–æ —Å—Ç–∞—Ç—É—Å
    try:
        db.session.commit()
        status = "–≤–∏–∫–æ–Ω–∞–Ω–æ" if task.is_completed else "–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ"
        flash(f'–°—Ç–∞—Ç—É—Å –∑–∞–≤–¥–∞–Ω–Ω—è "{task.content[:20]}..." –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ "{status}".', 'info')
    except Exception as e:
        db.session.rollback()
        flash(f'–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–≤–¥–∞–Ω–Ω—è: {e}', 'error')
        print(f"–ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É –∑–∞–≤–¥–∞–Ω–Ω—è: {e}")

    return redirect(url_for('planner'))

@app.route('/delete_task/<int:task_id>', methods=['POST'])
@login_required
def delete_task(task_id):
    """–í–∏–¥–∞–ª—è—î –∑–∞–≤–¥–∞–Ω–Ω—è."""
    task = Task.query.get_or_404(task_id)

    if task.user_id != session['user_id']:
        flash('–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è.', 'danger')
        return redirect(url_for('planner'))

    try:
        content_preview = task.content[:20]
        db.session.delete(task)
        db.session.commit()
        flash(f'–ó–∞–≤–¥–∞–Ω–Ω—è "{content_preview}..." —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.', 'success')
    except Exception as e:
        db.session.rollback()
        flash(f'–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è: {e}', 'error')
        print(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è: {e}")

    return redirect(url_for('planner'))


@app.route('/edit_task/<int:task_id>', methods=['GET', 'POST'])
@login_required
def edit_task(task_id):
    """–†–µ–¥–∞–≥—É—î —ñ—Å–Ω—É—é—á–µ –∑–∞–≤–¥–∞–Ω–Ω—è (GET - –ø–æ–∫–∞–∑–∞—Ç–∏ —Ñ–æ—Ä–º—É, POST - –∑–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏)."""
    task = Task.query.get_or_404(task_id)

    if task.user_id != session['user_id']:
        flash('–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ü—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è.', 'danger')
        return redirect(url_for('planner'))

    if request.method == 'POST':
        new_content = request.form.get('content')
        new_category = request.form.get('category')

        if not new_content:
            flash('–¢–µ–∫—Å—Ç –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º!', 'error')
            return render_template('edit_task.html', task=task, categories=CATEGORIES)

        if new_category not in CATEGORIES:
             flash('–ù–µ–≤—ñ—Ä–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è!', 'error')
             new_category = task.category

        task.content = new_content
        task.category = new_category
        try:
            db.session.commit()
            flash('–ó–∞–≤–¥–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!', 'success')
            return redirect(url_for('planner'))
        except Exception as e:
            db.session.rollback()
            flash(f'–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è: {e}', 'error')
            print(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è: {e}")
            return render_template('edit_task.html', task=task, categories=CATEGORIES)

    return render_template('edit_task.html', task=task, categories=CATEGORIES)

# --- –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫ ---
@app.errorhandler(404)
def page_not_found(e):
    return render_template('404.html'), 404

# --- –ó–∞–ø—É—Å–∫ (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ—ó —Ä–æ–∑—Ä–æ–±–∫–∏) ---
if __name__ == '__main__':
    app.run(debug=False, host='0.0.0.0')
