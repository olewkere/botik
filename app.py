import os
from flask import Flask, render_template, request, redirect, url_for, session, flash
from dotenv import load_dotenv
from models import db, User

load_dotenv()

app = Flask(__name__)

app.config['SECRET_KEY'] = os.getenv('FLASK_SECRET_KEY')

db_user = os.getenv('DATABASE_USER')
db_password = os.getenv('DATABASE_PASSWORD')
db_host = os.getenv('DATABASE_HOST')
db_name = os.getenv('DATABASE_NAME')
app.config['SQLALCHEMY_DATABASE_URI'] = f'mysql+mysqlconnector://{db_user}:{db_password}@{db_host}/{db_name}'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db.init_app(app)

with app.app_context():
    try:
        print("–°–ø—Ä–æ–±–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
        db.create_all()
        print("–¢–∞–±–ª–∏—Ü—ñ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ (–∞–±–æ –≤–∂–µ —ñ—Å–Ω—É–≤–∞–ª–∏).")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ç–∞–±–ª–∏—Ü—å: {e}")


@app.route('/')
def index():
    """–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞: –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É–≤—ñ–π—à–æ–≤,
       —ñ–Ω–∞–∫—à–µ –ø–æ–∫–∞–∑—É—î —Å—Ç–æ—Ä—ñ–Ω–∫—É –≤—Ö–æ–¥—É/—Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó."""
    if 'user_id' in session:
        return redirect(url_for('welcome'))
    return render_template('login.html')


@app.route('/register', methods=['POST'])
def register():
    """–û–±—Ä–æ–±–ª—è—î —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    if 'user_id' in session:
        return redirect(url_for('welcome'))

    username = request.form.get('username')
    password = request.form.get('password')

    if not username or not password:
        flash('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —ñ–º\'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –ø–∞—Ä–æ–ª—å.', 'error')
        return redirect(url_for('index'))

    existing_user = User.query.filter_by(username=username).first()
    if existing_user:
        flash('–¶–µ —ñ–º\'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–∂–µ –∑–∞–π–Ω—è—Ç–µ. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–µ.', 'error')
        return redirect(url_for('index'))

    new_user = User(username=username)
    new_user.set_password(password)

    try:
        db.session.add(new_user)
        db.session.commit()
        flash('–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞! –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ —É–≤—ñ–π—Ç–∏.', 'success')
        return redirect(url_for('index'))
        
    except Exception as e:
        db.session.rollback()
        flash(f'–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {e}', 'error')
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
        return redirect(url_for('index'))


@app.route('/login', methods=['POST'])
def login():
    """–û–±—Ä–æ–±–ª—è—î —Å–ø—Ä–æ–±—É –≤—Ö–æ–¥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    if 'user_id' in session:
        return redirect(url_for('welcome'))

    username = request.form.get('username')
    password = request.form.get('password')

    if not username or not password:
        flash('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —ñ–º\'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –ø–∞—Ä–æ–ª—å.', 'error')
        return redirect(url_for('index'))

    user = User.query.filter_by(username=username).first()

    if user and user.check_password(password):
        session['user_id'] = user.id
        session['username'] = user.username
        flash('–í—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π!', 'success')
        return redirect(url_for('welcome'))
    else:
        flash('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–µ —ñ–º\'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –ø–∞—Ä–æ–ª—å.', 'error')
        return redirect(url_for('index'))


@app.route('/welcome')
def welcome():
    """–°—Ç–æ—Ä—ñ–Ω–∫–∞ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –¥–ª—è –∑–∞–ª–æ–≥—ñ–Ω–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤."""
    if 'user_id' not in session:
        flash('–ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤—ñ–π–¥—ñ—Ç—å, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Ü—é —Å—Ç–æ—Ä—ñ–Ω–∫—É.', 'warning')
        return redirect(url_for('index'))
        
    username = session.get('username', '–ì—ñ—Å—Ç—å')
    return render_template('welcome.html', username=username)


@app.route('/export')
@login_required
def export_tasks():
    """–ì–µ–Ω–µ—Ä—É—î —Ç–µ–∫—Å—Ç–æ–≤–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É."""
    user_id = session['user_id']
    user = User.query.get(user_id)
    tasks = Task.query.filter_by(user_id=user_id).order_by(Task.category, Task.timestamp.desc()).all()

    if not tasks:
        flash('–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∑–∞–≤–¥–∞–Ω—å –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É.', 'info')
        return redirect(url_for('planner'))

    export_text_lines = [f"üìã –°–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user.username}\n"]

    current_category = None
    for task in tasks:
        if task.category != current_category:
            category_name = CATEGORIES.get(task.category, task.category.capitalize())
            export_text_lines.append(f"\n--- {category_name} ---")
            current_category = task.category

        status_emoji = "‚úîÔ∏è" if task.is_completed else "‚≠ï"
        export_text_lines.append(f"{status_emoji} {task.content}")

    export_text = "\n".join(export_text_lines)

    return render_template('export.html', export_text=export_text)


@app.route('/logout')
def logout():
    """–í–∏—Ö—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Å–∏—Å—Ç–µ–º–∏."""
    session.pop('user_id', None)
    session.pop('username', None)
    flash('–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∏–π—à–ª–∏ –∑ —Å–∏—Å—Ç–µ–º–∏.', 'info')
    return redirect(url_for('index'))

if __name__ == '__main__':
    app.run(debug=True)
